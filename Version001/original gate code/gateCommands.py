import commonStrings as STR
import gateGlobals as G
import gateGeneral as general
import gateStatus as status

import RPi.GPIO as GPIO

################################################################################
## This file contains the code for servicing all the commands sent to the unit via TCP or the local monitor. We also have
## commands generated by inputs from the gate sensors, buttons and gate controller and ouputs from the rpi.
## 
## Functions: AutoOpenCloseCommand (parameters)
##                 SwitchChangeCommand (parameters)
##                 LedCommand (parameters)
##                 MotionCommand (parameters)
##                 SetModeCommand (parameters)
##                 ButtonChangeCommand (parameters)
##                 SendStatusToCallerCommand (parameters)
##                 UnusedCommand (parameters)
##                 
##
################################################################################


################################################################################
##
## Function: OpenCloseCommand (parameters)
##
## Parameters: parameters - list of strings - the original message.
##
## Returns:
##
## Globals modified:
##
## Comments: Command to open/close the gates. Because the gate controller has an alternate action input to open/close the
## gates we do not know if the gate will open or close as it could have been operated by the remote controllers and left
## partly open. We therefore check if the gate is in a partially open state and operate the start input. We then check to
## see if the gate opens or closes. If it moves to the wrong state we will operate start again. This action is performed in
## the gate control process.
##
## Commands: Open / Close - Gates
##
################################################################################

def OpenCloseCommand (parameters) :

    G.gateCommandQueue.put ((parameters [0], parameters [1]))
    
    return STR.OK
        
################################################################################
##
## SwitchChangeCommand (parameters) :
##
## Parameters: parameters - list of strings - SWITCH - RIGHT / LEFT - OPEN / CLOSED - ACTIVE / INACTIVE
## E.g. LEFT OPEN SWITCH INACTIVE
##
## Returns:
##
## Globals modified:
##
## Comments: Called when any of the limit switches on the gates change state. Each gate has a reed switch just before the
## fully open and fully closed position. When we detect a change we send a 2 element tuple command to the gate process.
## The possible 2 element tuple commands sent to the gate process are:
##
## (SWITCH LEFT CLOSED, ACTIVE)
## (SWITCH LEFT CLOSED, INACTIVE)
## (SWITCH LEFT OPEN, ACTIVE)
## (SWITCH LEFT OPEN, INACTIVE)
## (SWITCH RIGHT CLOSED, ACTIVE)
## (SWITCH RIGHT CLOSED, INACTIVE)
## (SWITCH RIGHT OPEN, ACTIVE)
## (SWITCH RIGHT OPEN, INACTIVE)
##
################################################################################

def SwitchChangeCommand (parameters) :

    # Tell gate process about switch state change.    
    G.gateCommandQueue.put ((parameters [0] + ' ' + parameters [1]  + ' ' + parameters [2] , parameters [3]))
        
    return STR.OK

################################################################################
##
## Function: LedCommand (parameters)
##
## Parameters: parameters - list of strings - the original message.
##
## Returns:
##
## Globals modified: 
##
## Comments: Commands to control the leds or lights. We can set them on, off, flashing or stop the flashing. To flash
## a led we set flash1 or flash2. This determines which part of the flash cycle the led will be on. This allows us to have 
## leds flash alternately by setting one to high and the other to low. If the flashing is terminated with a last the last state
## of the led will be restored.
##
## Commands: Led - Red / Green / Front / Drive / Sign -  On / Off / Flash1 / Flash2 / Last
##
## E.g. Led Green On, Led Front Flash1, Led sign off
##
################################################################################

def LedCommand (parameters) :

    # Send command to led control process. We pass the 2nd and 3rd parameters as a tuple
    G.ledCommandQueue.put ((parameters [1], parameters [2]))
    
    return STR.OK
        
################################################################################
##
## Function: MotionCommand (parameters)
##
## Parameters: parameters - list of strings - the original message.
##
## Returns:
##
## Globals modified: 
##
## Comments: Called when the gate controller signals that the gate is moving or stopped. We use the warning beacon
## lamp output. When the gate is moving we flash the red and green leds in the stop and start buttons. If it is nighttime
## we also flash the front lights.
##
## Commands: Gates - Are - Moving / Stopped
##
################################################################################

def MotionCommand (parameters) :

    if parameters [2] == 'MOVING' :
        # Set red and green leds to flash alternately.
        G.ledCommandQueue.put ((STR.RED, STR.FLASH1))
        G.ledCommandQueue.put ((STR.GREEN, STR.FLASH2))
        
        # Flash the front and sign lights if it is nighttime. 
        if G.dayNightMode == STR.NIGHT :
            G.ledCommandQueue.put ((STR.FRONT, STR.FLASH1))
            G.ledCommandQueue.put ((STR.SIGN, STR.FLASH2))
            
    else :
        # Restore red and green leds to original state.
        G.ledCommandQueue.put ((STR.RED, STR.LAST))
        G.ledCommandQueue.put ((STR.GREEN, STR.LAST))

        # Restore front and sign lights if it is nighttime
        if G.dayNightMode == STR.NIGHT :
            G.ledCommandQueue.put ((STR.FRONT, STR.LAST))
            G.ledCommandQueue.put ((STR.SIGN, STR.LAST))

    # Tell gate process about gate motion. Parameter 0 is GATES. Parameter 2 is STOPPED / MOVING.
    G.gateCommandQueue.put ((parameters [0], parameters [2]))

    return STR.OK
    
################################################################################
##
## Function: SetModeCommand (parameters)
##
## Parameters: parameters - list of strings - the original message.
##
## Returns:
##
## Globals modified: 
##
## Comments: Used to set various modes.
##
## Commands: Set - Pedestrian / Vehicle / Day / Night - Mode
##
################################################################################

def SetModeCommand (parameters) :

    # Set mode to required state.
    if  parameters [1] in ('PEDESTRIAN', 'VEHICLE') :
        G.pedestrianVehicleMode = parameters [1] 
    else :
        G.dayNightMode = parameters [1] 
        
        #Is it day or night?
        if G.dayNightMode == STR.DAY :
            # It is day, so turn off all lights.
            G.ledCommandQueue.put ((STR.FRONT, STR.OFF))
            G.ledCommandQueue.put ((STR.SIGN, STR.OFF))
            G.ledCommandQueue.put ((STR.DRIVE, STR.OFF))
            
        else:
            # It is night, so turn on sign light. Only turn drive light on if gate is not closed.
            G.ledCommandQueue.put ((STR.SIGN, STR.ON))
            if G.gateState != STR.GATES_CLOSED :
                G.ledCommandQueue.put ((STR.DRIVE, STR.ON))

        return STR.OK

################################################################################
##
## Function: ButtonChangeCommand (parameters)
##
## Parameters: parameters - list of strings - the original message.
##
## Returns: string - OK 
##
## Globals modified: 
##
## Comments: Called when a gate button changes state. For the open button we will pass the current state of the button
## to either the startGate or ped output depending on the state of the pedestrianMode flag. The stop button state is
## passed to the stop gate output. The startGate, ped and stop gate outputs are connected to the gate controller inputs.
## Note that the stop input to the controller is n/c, so in the idle state we are holding stop gate output ON.
##
## Commands: Button - Open / Stop - Pressed / Released
##
################################################################################

def ButtonChangeCommand (parameters) :

    # If the button was 'open' and we are in pedestrian mode then we use the ped input on the controller so that only the left
    # gate partially opens. 
    if parameters [1] == 'OPEN' and G.pedestrianVehicleMode == 'PEDESTRIAN' :
        parameters [1]  = 'PED'
        
    # Tell gate process button changed state. Parameter 0+1 is button open/stop/ped. Parameter 2 is Pressed/Released.
    G.gateCommandQueue.put ((parameters [0] + ' ' + parameters [1], parameters [2]))

    return STR.OK

################################################################################
##
## Function: SendStatusToCallerCommand (parameters)
##
## Parameters: parameters - list of strings - the original message.
##
## Returns:
##
## Globals modified: 
##
## Comments: Send the caller the current status of the GPIO lines and global flags.
##
## Commands: Status
##
################################################################################

def SendStatusToCallerCommand (parameters) :

    # Check the current state of the input lines. 
    listOfStatusMessages = status.CheckRpiLines (changed = False)
    # Send to caller as a single string with a terminating OK.
    return STR.CRLF.join (listOfStatusMessages) + STR.CRLF + STR.OK

################################################################################
##
## Function: ExteriorLightsCommand (parameters)
##
## Parameters: parameters - list of strings - the original message.
##
## Returns:
##
## Globals modified: 
##
## Comments: Called when the exterior lights are turned on or off. At present we are using a relay operated by the light at
## the front of the garage to drive an input. In future we will send a message from the lights controller. We will turn on/off
## the front light, sign light and the drive lights. Note that the gates also control the drive lights when it is nighttime. They
## will be turned on when the gates open and off when the gates close. The sign and front lights are also turned on when
## we detect sunset and off at sunrise.
##
## Commands: Exterior - Lights - On / Off
##
################################################################################

def ExteriorLightsCommand (parameters) :

    # Turn lights On or Off as required.
    G.ledCommandQueue.put ((STR.SIGN, parameters [2]))
    G.ledCommandQueue.put ((STR.FRONT, parameters [2]))
    G.ledCommandQueue.put ((STR.DRIVE, parameters [2]))

    return STR.OK

################################################################################
##
## Function: UnusedCommand (parameters)
##
## Parameters: parameters - list of strings - the original message.
##
## Returns:
##
## Globals modified: 
##
## Comments: Called for any commands we want to ignore. These are normally messages from output pin changes.
##
################################################################################

def UnusedCommand (parameters) :

    ###print 'Not used : ' + ' '.join (parameters)
    
    return STR.OK

################################################################################
##
## Function: ControllerCommand (parameters)
##
## Parameters: parameters - list of strings - the original message.
##
## Returns:
##
## Globals modified: 
##
## Comments: Called when we receive a the 1st broadcast from a system controller.
##
################################################################################

def ControllerCommand (parameters) :

    print ' '.join (parameters)
    
    return STR.OK

################################################################################
##
## Function: TestCommand (parameters)
##
## Parameters: parameters - list of strings - the original message.
##
## Returns:
##
## Globals modified: 
##
## Comments:
##
################################################################################

def TestCommand (parameters) :

    if G.useBackupVersion :
        G.netSendQueue.put ((' '.join (parameters) + STR.CRLF, STR.BU_GSM_ID))
    else :
        G.netSendQueue.put ((' '.join (parameters) + STR.CRLF, STR.GSM_ID))
    
    return STR.OK

################################################################################
##
## Function: SignalToGsmCommand (parameters)
##
## Parameters: parameters - list of strings - the original message.
##
## Returns:
##
## Globals modified: 
##
## Comments: When the gate controller detects a button press we will pass it on to the GSM controller. The GSM controller
## will then activate one of the zones on the Texecom alarm system to sound a chime so that we know when someone is
## at the gate. When the gate controller detects the gates open or closed we pass this on to the GSM controller. The GSM
## controller will pass this on to the user who has requested the gate operation.
##
################################################################################

def SignalToGsmCommand (parameters) :

    if G.useBackupVersion :
        G.netSendQueue.put ((' '.join (parameters) + STR.CRLF, STR.BU_GSM_ID))
    else :
        G.netSendQueue.put ((' '.join (parameters) + STR.CRLF, STR.GSM_ID))
    return STR.OK

################################################################################
##
## Function: TimedGatesCommand (parameters)
##
## Parameters:  parameters - list of strings - the original message. parameters[2] is ON or OFF.
##
## Returns:
##
## Globals modified:
##
## Comments: Command to turn timed gate operation on or off. The gatetimes.txt file holds a list of open and close
## times for the gates. The 1st line of this file contains the indicator ON or OFF to control if timed operation is used. This
## command changes this indicator as required.
##
################################################################################

def TimedGatesCommand (parameters) :

    # Get gatetimes.txt into a list. If there are no lines the list will be empty.
    f = open ('gatetimes.txt', 'r')
    gateProgrammedTimes = f.readlines ()
    f.close ()

    # Exit if there are no open and close times.
    if len (gateProgrammedTimes) < 2 :
        return 'Error: No times'
        
    # Replace the 1st line with the new state
    gateProgrammedTimes [0] = parameters [2] + '\r\n'
    
    # Write it back to the file.
    f = open ('gatetimes.txt', 'w')
    gateProgrammedTimes = f.writelines (gateProgrammedTimes)
    f.close ()
    
    return STR.OK

###############################################################################
##
## Function: ProcessCommand (inputData)
##
## Parameters: inputData - string - the command string to process.
##
## Returns:
##
## Globals modified:
##
## Comments: Splits the string supplied into a list. The 1st word is treated as the command and the following words
## are the parameters.  Checks against a lookup of available commands and parameters and if we have a match
## runs the required command.
##
################################################################################

def ProcessCommand (inputData) :

    # Lookup table for all valid commands. We use this to verify the command is valid and then call the required command.
    # Each element holds a command and all the valid parameters and the function to call. There are 2 special values in the
    # lookup: A * means match any word in this position and ** means ignore this and any further words.
    commandLookup = (
        (('OPEN',), ('GATES',), OpenCloseCommand),
        (('CLOSE',), ('GATES',), OpenCloseCommand),
        (('NO',), ('ACTION',), UnusedCommand),
        (('TIMED',), ('GATES',), ('ON', 'OFF'), TimedGatesCommand),
        (('BUTTON',), ('OPEN', 'STOP'), ('PRESSED', 'RELEASED'), ButtonChangeCommand),
        (('EXTERIOR',), ('LIGHTS',), ('ON', 'OFF'), ExteriorLightsCommand),
        (('GATE',), ('LEFT','RIGHT'), ('OPENING', 'CLOSING', 'FORCED'), UnusedCommand),
        (('GATE',), ('SWITCH',), ('LEFT', 'RIGHT'), ('OPEN', 'CLOSED'), ('ACTIVE', 'INACTIVE'), UnusedCommand),
        (('GATE',), ('BUTTON',), ('OPEN', 'STOP', 'PED'), ('PRESSED', 'RELEASED'), SignalToGsmCommand),
        (('GATES',), ('OPENING', 'CLOSING', 'RESTARTING'), UnusedCommand),
        (('GATES',), ('OPEN', 'CLOSED', 'HALTED', 'BUSY'), SignalToGsmCommand),
        (('GATES',), ('ARE',), ('MOVING', 'STOPPED'), MotionCommand),
        (('LED',), ('RED', 'GREEN', 'FRONT', 'DRIVE', 'SIGN'), ('ON', 'OFF', 'FLASH1', 'FLASH2', 'LAST'), LedCommand),
        ((STR.FAILED,), STR.OURCONTROLLERS, ControllerCommand),
        ((STR.OFFLINE,), STR.OURCONTROLLERS, ControllerCommand),
        ((STR.ONLINE,), STR.OURCONTROLLERS, ControllerCommand),
        (('OUTPUT',), ('START', 'STOP', 'PED', 'GREEN', 'RED', 'DRIVE', 'FRONT', 'SIGN'), ('IS',), ('ON', 'OFF'), UnusedCommand),
        (('SET',), ('PEDESTRIAN', 'VEHICLE', 'DAY', 'NIGHT'), ('MODE',), SetModeCommand),
        (('STATUS',), SendStatusToCallerCommand),
        (('SWITCH',), ('LEFT', 'RIGHT'), ('OPEN', 'CLOSED'), ('ACTIVE', 'INACTIVE'), SwitchChangeCommand),
        (('TEST',), ('**',),TestCommand)
    )

    # Convert the received string to uppercase and into list of parameters, save the number of parameters.
    inputDataList = inputData.upper ().split ()
    numberOfParametersInInput = len (inputDataList) 
 
    # Now we will try and match the supplied command with an entry in our table of commands.
    for testCommand in commandLookup :
            
        # Note that testCommand includes the function to call in it's length, hence the -1.
        # numberOfParametersInTestCommand will also be the index for the function to call.
        numberOfParametersInTestCommand = len (testCommand)  - 1

        # Verify that the command has the correct parameters by checking each word.
        # Miss the function to call at end of the line.
        for inputWord, testWords in zip (inputDataList, testCommand [0 : numberOfParametersInTestCommand]) :
            
            # A ** means ignore all further parameters so we simply execute the command.
            if '**'  in testWords :
                return testCommand [numberOfParametersInTestCommand] (inputDataList)
        
            # Check a word is NOT one of the valid words for this position. A * means match any word in that position.
            if inputWord not in testWords and '*' not in testWords :
                
                # Exit if word not valid. This is not fatal as there could be the same command with different parameters.
                # We exit back to get the next testCommand.
                break

        # If we get here all the words match.
        else :
            # Does the input line have the same number of parameters as this testCommand? We need to do this as
            # the lists in zip may be different lengths.
            if numberOfParametersInInput == numberOfParametersInTestCommand :
                # Parameters are all good and same number so execute command.
                return testCommand [numberOfParametersInTestCommand] (inputDataList)
    
    # If we get here we did not find the command so flag error to user.
    else :
        return 'Error: Unknown command'
    
    return
    
    
################################################################################
##
## Function:
##
## Parameters:
##
## Returns:
##
## Globals modified:
##
## Comments: 
##
################################################################################
